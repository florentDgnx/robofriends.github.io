{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","components/CounterButton.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","this","props","name","id","email","className","alt","src","Component","CardList","botCards","robots","map","robot","key","SearchBox","type","placeholder","value","searchField","onChange","changeInput","Scroll","style","children","ErrorBoundry","state","hasError","error","inf","setState","Header","nextProps","nextState","App","onRequestRobots","onSearchChange","isPending","filteredRobots","reduce","res","toLowerCase","indexOf","push","bind","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d16f79b3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    const { name, id, email } = this.props;\r\n    return (\r\n      <div className=\"bg-light-green dib br3 pa3 ma2 grow pw2 shadow-5\">\r\n        <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n          <h2 className=\"tc\"> {name} </h2>\r\n          <p className=\"tc\"> {email} </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, {Component} from 'react';\r\nimport 'tachyons';\r\nimport Card from './Card';\r\n\r\nclass CardList extends Component {\r\n\r\n    render() {\r\n\r\n        const botCards = this.props.robots.map(robot => {\r\n            return (\r\n            <Card\r\n                key={robot.id}\r\n                id={robot.id}\r\n                name={robot.name}\r\n                email={robot.email}\r\n            />)\r\n            \r\n        });\r\n\r\n        return ( <div> {botCards} </div> )\r\n    }\r\n}   \r\n\r\nexport default CardList","import React, {Component} from 'react';\r\n\r\nclass SearchBox extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div  id='searchBox' className='pa2'>\r\n            <input\r\n             className={\"pa3 ba b--green bg-lightest-blue\"}\r\n             type='search'\r\n             placeholder='search robot'\r\n             value={this.props.searchField}\r\n             onChange={this.props.changeInput}\r\n            />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass Scroll extends Component {\r\n    render(){\r\n        return (\r\n            <div style={{'overflowY': 'scroll', 'height': '800px'}} > \r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, inf) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return (<h1>Oooops. That is not good</h1>)\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"f1\"> Robofriends</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount() {\n    this.setState(state => {\n      return { count: this.state.count + 1 };\n    });\n  }\n\n  render() {\n    return (\n      <button color={this.props.color} onClick={this.updateCount.bind(this)}>\n        Count on me: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from \"../components/Header\";\r\n\r\nimport \"./App.css\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n    const filteredRobots = robots.reduce((res, robot) => {\r\n      if (\r\n        searchField === \"\" ||\r\n        robot.name.toLowerCase().indexOf(searchField.toLowerCase()) !== -1\r\n      ) {\r\n        res.push(robot);\r\n      }\r\n      return res;\r\n    }, []);\r\n\r\n    return isPending ? (\r\n      <h1 className=\"tc\">LOADING</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox\r\n          changeInput={onSearchChange.bind(this)}\r\n          searchField={searchField}\r\n        />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return {\r\n        ...state,\r\n        searchField: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return {\r\n        ...state,\r\n        isPending: true\r\n      };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        robots: action.payload,\r\n        isPending: false\r\n      };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPending: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}